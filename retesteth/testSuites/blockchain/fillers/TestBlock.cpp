#include "TestBlock.h"

// Raw block RLP, that cann not be generated by retesteth
TestBlock::TestBlock(BYTES const& _rlp, string const& _chainName, FORK const& _chainNet, VALUE const& _number)
  : m_chainName(_chainName), m_doNotExport(false)
{
    m_blockNumber = spVALUE(new VALUE(_number));
    m_chainNet = spFORK(new FORK(_chainNet));
    m_rawRLP = spBYTES(new BYTES(_rlp));
}

DataObject TestBlock::asDataObject() const
{
    DataObject res;
    res["chainname"] = m_chainName;
    // res["chainnetwork"] = m_chainNet.getCContent().asString();
    res["blocknumber"] = m_blockNumber.getCContent().asDecString();
    if (!m_expectException.empty())
        res["expectException"] = m_expectException;

    // No test objects was registered
    if (!m_block.isEmpty())
    {
        res["uncleHeaders"] = DataObject(DataType::Array);
        for (auto const& un : m_block.getCContent().uncles())
            res["uncleHeaders"].addArrayObject(un.getCContent().asDataObject());
        res["blockHeader"] = m_block.getCContent().header().getCContent().asDataObject();
        res["transactions"] = DataObject(DataType::Array);
        for (auto const& tr : m_block.getCContent().transactions())
            res["transactions"].addArrayObject(tr.getCContent().asDataObject(ExportOrder::OldStyle));
    }

    res["rlp"] = m_rawRLP.getCContent().asString();
    return res;
}
